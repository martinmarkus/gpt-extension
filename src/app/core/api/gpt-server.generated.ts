//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class AuthenticationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    login(dto: LoginRequestDTO): Observable<LoginResponseDTO> {
        let url_ = this.baseUrl + "/Authentication/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LoginResponseDTO>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LoginResponseDTO>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<LoginResponseDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LoginResponseDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    register(dto: RegisterRequestDTO): Observable<RegisterResponseDTO> {
        let url_ = this.baseUrl + "/Authentication/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RegisterResponseDTO>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RegisterResponseDTO>;
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<RegisterResponseDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RegisterResponseDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    confirmCustomer(dto: ConfirmCustomerRequestDTO): Observable<BaseResponseDTO> {
        let url_ = this.baseUrl + "/Authentication/ConfirmCustomer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processConfirmCustomer(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processConfirmCustomer(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BaseResponseDTO>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BaseResponseDTO>;
        }));
    }

    protected processConfirmCustomer(response: HttpResponseBase): Observable<BaseResponseDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BaseResponseDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getUser(): Observable<UserResponseDTO> {
        let url_ = this.baseUrl + "/Authentication/GetUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserResponseDTO>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserResponseDTO>;
        }));
    }

    protected processGetUser(response: HttpResponseBase): Observable<UserResponseDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserResponseDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable({
    providedIn: 'root'
})
export class GPTClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:5001";
    }

    getOwnApiKeys(): Observable<ApiKeysResponseDTO> {
        let url_ = this.baseUrl + "/GPT/GetOwnApiKeys";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOwnApiKeys(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOwnApiKeys(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiKeysResponseDTO>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiKeysResponseDTO>;
        }));
    }

    protected processGetOwnApiKeys(response: HttpResponseBase): Observable<ApiKeysResponseDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiKeysResponseDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    setActiveApiKey(dto: ApiKeyRequestDTO): Observable<ApiKeysResponseDTO> {
        let url_ = this.baseUrl + "/GPT/SetActiveApiKey";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSetActiveApiKey(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSetActiveApiKey(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiKeysResponseDTO>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiKeysResponseDTO>;
        }));
    }

    protected processSetActiveApiKey(response: HttpResponseBase): Observable<ApiKeysResponseDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiKeysResponseDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    addOrUpdateActiveApiKey(dto: ApiKeyRequestDTO): Observable<ApiKeysResponseDTO> {
        let url_ = this.baseUrl + "/GPT/AddOrUpdateActiveApiKey";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddOrUpdateActiveApiKey(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddOrUpdateActiveApiKey(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiKeysResponseDTO>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiKeysResponseDTO>;
        }));
    }

    protected processAddOrUpdateActiveApiKey(response: HttpResponseBase): Observable<ApiKeysResponseDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiKeysResponseDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    removeApiKey(dto: ApiKeyRequestDTO): Observable<ApiKeysResponseDTO> {
        let url_ = this.baseUrl + "/GPT/RemoveApiKey";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveApiKey(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveApiKey(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiKeysResponseDTO>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiKeysResponseDTO>;
        }));
    }

    protected processRemoveApiKey(response: HttpResponseBase): Observable<ApiKeysResponseDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiKeysResponseDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class BaseResponseDTO implements IBaseResponseDTO {
    responseType!: ResponseType;
    errorMessage!: string;

    constructor(data?: IBaseResponseDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.responseType = _data["responseType"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): BaseResponseDTO {
        data = typeof data === 'object' ? data : {};
        let result = new BaseResponseDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["responseType"] = this.responseType;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IBaseResponseDTO {
    responseType: ResponseType;
    errorMessage: string;
}

export class LoginResponseDTO extends BaseResponseDTO implements ILoginResponseDTO {
    authToken!: string;

    constructor(data?: ILoginResponseDTO) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.authToken = _data["authToken"];
        }
    }

    static override fromJS(data: any): LoginResponseDTO {
        data = typeof data === 'object' ? data : {};
        let result = new LoginResponseDTO();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authToken"] = this.authToken;
        super.toJSON(data);
        return data;
    }
}

export interface ILoginResponseDTO extends IBaseResponseDTO {
    authToken: string;
}

export enum ResponseType {
    Success = 0,
    NotFound = 1,
    Unauthorized = 2,
    Forbidden = 3,
    MissingParam = 4,
    Conflict = 5,
    InternalError = 6,
}

export class LoginRequestDTO implements ILoginRequestDTO {
    email!: string;
    password!: string;

    constructor(data?: ILoginRequestDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginRequestDTO {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequestDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginRequestDTO {
    email: string;
    password: string;
}

export class RegisterResponseDTO extends BaseResponseDTO implements IRegisterResponseDTO {

    constructor(data?: IRegisterResponseDTO) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): RegisterResponseDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterResponseDTO();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IRegisterResponseDTO extends IBaseResponseDTO {
}

export class RegisterRequestDTO implements IRegisterRequestDTO {
    email!: string;
    password!: string;

    constructor(data?: IRegisterRequestDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): RegisterRequestDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterRequestDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IRegisterRequestDTO {
    email: string;
    password: string;
}

export class ConfirmCustomerRequestDTO implements IConfirmCustomerRequestDTO {
    email!: string;

    constructor(data?: IConfirmCustomerRequestDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
        }
    }

    static fromJS(data: any): ConfirmCustomerRequestDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ConfirmCustomerRequestDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        return data;
    }
}

export interface IConfirmCustomerRequestDTO {
    email: string;
}

export class UserResponseDTO extends BaseResponseDTO implements IUserResponseDTO {
    email!: string;
    apiKeysResponseDTO!: ApiKeysResponseDTO;

    constructor(data?: IUserResponseDTO) {
        super(data);
        if (data) {
            this.apiKeysResponseDTO = data.apiKeysResponseDTO && !(<any>data.apiKeysResponseDTO).toJSON ? new ApiKeysResponseDTO(data.apiKeysResponseDTO) : <ApiKeysResponseDTO>this.apiKeysResponseDTO;
        }
        if (!data) {
            this.apiKeysResponseDTO = new ApiKeysResponseDTO();
        }
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.email = _data["email"];
            this.apiKeysResponseDTO = _data["apiKeysResponseDTO"] ? ApiKeysResponseDTO.fromJS(_data["apiKeysResponseDTO"]) : new ApiKeysResponseDTO();
        }
    }

    static override fromJS(data: any): UserResponseDTO {
        data = typeof data === 'object' ? data : {};
        let result = new UserResponseDTO();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["apiKeysResponseDTO"] = this.apiKeysResponseDTO ? this.apiKeysResponseDTO.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IUserResponseDTO extends IBaseResponseDTO {
    email: string;
    apiKeysResponseDTO: IApiKeysResponseDTO;
}

export class ApiKeysResponseDTO extends BaseResponseDTO implements IApiKeysResponseDTO {
    keys!: ApiKeyResponseDTO[];

    constructor(data?: IApiKeysResponseDTO) {
        super(data);
        if (data) {
            if (data.keys) {
                this.keys = [];
                for (let i = 0; i < data.keys.length; i++) {
                    let item = data.keys[i];
                    this.keys[i] = item && !(<any>item).toJSON ? new ApiKeyResponseDTO(item) : <ApiKeyResponseDTO>item;
                }
            }
        }
        if (!data) {
            this.keys = [];
        }
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["keys"])) {
                this.keys = [] as any;
                for (let item of _data["keys"])
                    this.keys!.push(ApiKeyResponseDTO.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): ApiKeysResponseDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ApiKeysResponseDTO();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.keys)) {
            data["keys"] = [];
            for (let item of this.keys)
                data["keys"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IApiKeysResponseDTO extends IBaseResponseDTO {
    keys: IApiKeyResponseDTO[];
}

export class ApiKeyResponseDTO implements IApiKeyResponseDTO {
    id!: string;
    isActive!: boolean;
    keyName!: string;
    key!: string;
    creationDate!: Date;

    constructor(data?: IApiKeyResponseDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.isActive = _data["isActive"];
            this.keyName = _data["keyName"];
            this.key = _data["key"];
            this.creationDate = _data["creationDate"] ? new Date(_data["creationDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ApiKeyResponseDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ApiKeyResponseDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isActive"] = this.isActive;
        data["keyName"] = this.keyName;
        data["key"] = this.key;
        data["creationDate"] = this.creationDate ? this.creationDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IApiKeyResponseDTO {
    id: string;
    isActive: boolean;
    keyName: string;
    key: string;
    creationDate: Date;
}

export class ApiKeyRequestDTO implements IApiKeyRequestDTO {
    id!: string;
    apiKey!: string;
    apiKeyName!: string;

    constructor(data?: IApiKeyRequestDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.apiKey = _data["apiKey"];
            this.apiKeyName = _data["apiKeyName"];
        }
    }

    static fromJS(data: any): ApiKeyRequestDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ApiKeyRequestDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["apiKey"] = this.apiKey;
        data["apiKeyName"] = this.apiKeyName;
        return data;
    }
}

export interface IApiKeyRequestDTO {
    id: string;
    apiKey: string;
    apiKeyName: string;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}